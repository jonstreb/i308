Title         : Homework 1
Author        : Jonathon Strebing
Logo          : True

[TITLE]

# Induction on Integers

Prove that $\forall n \in \mathbb{N}$,
~ Equation { #euler-thm }
3+3^2+\cdots+3^n=\frac{3^{n+1}-3}{2}
~ 
**Proof:**

Base Case:
~ Math
3^1 = \frac{3^{1+1}-3}{2}
~
~ Math
3 = \frac{9-3}{2}
~
~ Math
3 = 3
~
Inductive Hypothesis:

For a given k, the equation holds true for all n <= k

Induction step:
~ Math
S(k+1) = \frac{3^{k+1}-3}{2} + \frac{2(3^{k+1})}{2}
~
~ Math
= \frac{3^{k+1}-3 + 2{(3^{k+1})}}{2}
~
~ Math
= \frac{3(3^{k}-3) + 2({3^{k+1}})}{2}
~
~ Math
= \frac{3(3^{k+1})-3}{2}
~
~ Math
= \frac{3^{(k+1)+1}-3}{2}
~
# Structural Induction

A set $S$ is defined as follows:\
(1)  $2\in S$\
(2)  if $x,y\in S$, then $2(x+y)\in S$.\
(3)  if $x,y\in S$, then $xy \in S$.\
Prove that if $x\in S$ and $x\not=2$, then $x$ is divisible by 4.





# $\lambda$-Calculus
(1) $(\lambda a b c . c b a)zz(\lambda x y . x)$.\
    $(\lambda y . z)z$\
    
(2) $(\lambda z . z)(\lambda z . z z)(\lambda z . z y)$.\
    $(\lambda z . z y)(y)$\
    
(3) $(\lambda y. ((\lambda x. y(xx)) (\lambda x. y(xx)))) (\lambda x.x)$
    
    $\lambda x.(\lambda x . x)(xx)$\
    
# Operator Precedence and Associativity

(1) 
~ Framed {padding:1ex 1ex; width:400px}
``` haskell
multThenInc :: Int -> Int -> Int
multThenInc x y = x * y + 1

infixl 3 @@
(@@) = multThenInc
```
~
3 @@ 5 @@ 8

= 16 @@ 8

= 129

(2) 
~ Framed {padding:1ex 1ex; width:400px}
``` haskell
multThenInc :: Int -> Int -> Int
multThenInc x y = x * y + 1

infixr 3 @@
(@@) = multThenInc
```
~
3 @@ 5 @@ 8

= 3 @@ 41

= 124

(3)
~ Framed {padding:"1ex 1ex"; width:400px}
``` haskell
multThenInc :: Int -> Int -> Int
multThenInc x y = x * y + 1

infixl 7 @@
(@@) = multThenInc
```
~
3 @@ 5 @@ 7 + 1

= 16 @@ 7 + 1

= 114

(4)
~ Framed {padding:"1ex 1ex"; width:400px}
``` haskell
multThenInc :: Int -> Int -> Int
multThenInc x y = x * y + 1

infixr 7 @@
(@@) = multThenInc
```
~
3 @@ 5 @@ 7 + 1

= 3 @@ 36 + 1

= 110

(5)
~ Framed {padding:"1ex 1ex"; width:400px}
``` haskell
multThenInc :: Int -> Int -> Int
multThenInc x y = x * y + 1

infix 5 @@
(@@) = multThenInc
```
~
3 @@ 5 @@ 7 + 1

= Error